# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T10:58:21+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity, HTTPBasic
from fastapi import Path, Query
from pydantic import conint, constr
from starlette.requests import Request

from models import (
    EventsV1EventType,
    EventsV1Schema,
    EventsV1SchemaSchemaVersion,
    EventsV1Sink,
    EventsV1SinkSinkTest,
    EventsV1SinkSinkValidate,
    EventsV1Subscription,
    EventsV1SubscriptionSubscribedEvent,
    V1SchemasIdVersionsGetResponse,
    V1SinksGetResponse,
    V1SubscriptionsGetResponse,
    V1SubscriptionsSubscriptionSidSubscribedEventsGetResponse,
    V1TypesGetResponse,
)

app = MCPProxy(
    contact={
        'email': 'support@twilio.com',
        'name': 'Twilio Support',
        'url': 'https://support.twilio.com',
    },
    description='This is the public Twilio REST API.',
    license={
        'name': 'Apache 2.0',
        'url': 'https://www.apache.org/licenses/LICENSE-2.0.html',
    },
    termsOfService='https://www.twilio.com/legal/tos',
    title='Twilio - Events',
    version='1.42.0',
    servers=[{'url': 'https://events.twilio.com'}],
)


@app.get(
    '/v1/Schemas/{Id}',
    description=""" Fetch a specific schema with its nested versions. """,
    tags=['schema_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_schema(id: str = Path(..., alias='Id')):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Schemas/{Id}/Versions',
    description=""" Retrieve a paginated list of versions of the schema. """,
    tags=['subscription_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def list_schema_version(
    id: str = Path(..., alias='Id'),
    page_size: Optional[conint(ge=1, le=1000)] = Query(None, alias='PageSize'),
    page: Optional[conint(ge=0)] = Query(None, alias='Page'),
    page_token: Optional[str] = Query(None, alias='PageToken'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Schemas/{Id}/Versions/{SchemaVersion}',
    description=""" Fetch a specific schema and version. """,
    tags=['schema_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_schema_version(
    id: str = Path(..., alias='Id'),
    schema_version: int = Path(..., alias='SchemaVersion'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Sinks',
    description=""" Retrieve a paginated list of Sinks belonging to the account used to make the request. """,
    tags=['sink_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def list_sink(
    in_use: Optional[bool] = Query(None, alias='InUse'),
    status: Optional[str] = Query(None, alias='Status'),
    page_size: Optional[conint(ge=1, le=1000)] = Query(None, alias='PageSize'),
    page: Optional[conint(ge=0)] = Query(None, alias='Page'),
    page_token: Optional[str] = Query(None, alias='PageToken'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/Sinks',
    description=""" Create a new Sink """,
    tags=[
        'schema_operations',
        'sink_operations',
        'subscription_operations',
        'event_type_operations',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create_sink(request: Request):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v1/Sinks/{Sid}',
    description=""" Delete a specific Sink. """,
    tags=['schema_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_sink(
    sid: constr(pattern=r'^DG[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    )
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Sinks/{Sid}',
    description=""" Fetch a specific Sink. """,
    tags=['schema_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_sink(
    sid: constr(pattern=r'^DG[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    )
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/Sinks/{Sid}',
    description=""" Update a specific Sink """,
    tags=[
        'schema_operations',
        'sink_operations',
        'subscription_operations',
        'event_type_operations',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def update_sink(
    sid: constr(pattern=r'^DG[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    ),
    request: Request = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/Sinks/{Sid}/Test',
    description=""" Create a new Sink Test Event for the given Sink. """,
    tags=['schema_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create_sink_test(
    sid: constr(pattern=r'^DG[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    )
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/Sinks/{Sid}/Validate',
    description=""" Validate that a test event for a Sink was received. """,
    tags=['schema_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create_sink_validate(
    sid: constr(pattern=r'^DG[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    ),
    request: Request = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Subscriptions',
    description=""" Retrieve a paginated list of Subscriptions belonging to the account used to make the request. """,
    tags=['sink_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def list_subscription(
    sink_sid: Optional[
        constr(pattern=r'^DG[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Query(None, alias='SinkSid'),
    page_size: Optional[conint(ge=1, le=1000)] = Query(None, alias='PageSize'),
    page: Optional[conint(ge=0)] = Query(None, alias='Page'),
    page_token: Optional[str] = Query(None, alias='PageToken'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/Subscriptions',
    description=""" Create a new Subscription. """,
    tags=[
        'schema_operations',
        'sink_operations',
        'subscription_operations',
        'event_type_operations',
    ],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create_subscription(request: Request):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v1/Subscriptions/{Sid}',
    description=""" Delete a specific Subscription. """,
    tags=['subscription_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_subscription(
    sid: constr(pattern=r'^DF[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    )
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Subscriptions/{Sid}',
    description=""" Fetch a specific Subscription. """,
    tags=['schema_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_subscription(
    sid: constr(pattern=r'^DF[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    )
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/Subscriptions/{Sid}',
    description=""" Update a Subscription. """,
    tags=['schema_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def update_subscription(
    sid: constr(pattern=r'^DF[0-9a-fA-F]{32}$', min_length=34, max_length=34) = Path(
        ..., alias='Sid'
    ),
    request: Request = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Subscriptions/{SubscriptionSid}/SubscribedEvents',
    description=""" Retrieve a list of all Subscribed Event types for a Subscription. """,
    tags=['subscription_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def list_subscribed_event(
    subscription_sid: constr(
        pattern=r'^DF[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='SubscriptionSid'),
    page_size: Optional[conint(ge=1, le=1000)] = Query(None, alias='PageSize'),
    page: Optional[conint(ge=0)] = Query(None, alias='Page'),
    page_token: Optional[str] = Query(None, alias='PageToken'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/Subscriptions/{SubscriptionSid}/SubscribedEvents',
    description=""" Create a new Subscribed Event type for the subscription """,
    tags=['subscription_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def create_subscribed_event(
    subscription_sid: constr(
        pattern=r'^DF[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='SubscriptionSid'),
    request: Request = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v1/Subscriptions/{SubscriptionSid}/SubscribedEvents/{Type}',
    description=""" Remove an event type from a subscription. """,
    tags=['subscription_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def delete_subscribed_event(
    subscription_sid: constr(
        pattern=r'^DF[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='SubscriptionSid'),
    type: str = Path(..., alias='Type'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Subscriptions/{SubscriptionSid}/SubscribedEvents/{Type}',
    description=""" Read an Event for a Subscription. """,
    tags=['subscription_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_subscribed_event(
    subscription_sid: constr(
        pattern=r'^DF[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='SubscriptionSid'),
    type: str = Path(..., alias='Type'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1/Subscriptions/{SubscriptionSid}/SubscribedEvents/{Type}',
    description=""" Update an Event for a Subscription. """,
    tags=['subscription_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def update_subscribed_event(
    subscription_sid: constr(
        pattern=r'^DF[0-9a-fA-F]{32}$', min_length=34, max_length=34
    ) = Path(..., alias='SubscriptionSid'),
    type: str = Path(..., alias='Type'),
    request: Request = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Types',
    description=""" Retrieve a paginated list of all the available Event Types. """,
    tags=['schema_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def list_event_type(
    schema_id: Optional[str] = Query(None, alias='SchemaId'),
    page_size: Optional[conint(ge=1, le=1000)] = Query(None, alias='PageSize'),
    page: Optional[conint(ge=0)] = Query(None, alias='Page'),
    page_token: Optional[str] = Query(None, alias='PageToken'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1/Types/{Type}',
    description=""" Fetch a specific Event Type. """,
    tags=['schema_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def fetch_event_type(type: str = Path(..., alias='Type')):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
