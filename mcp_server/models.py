# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T10:58:21+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import AnyUrl, BaseModel, Field, constr


class EventsV1EventType(BaseModel):
    date_created: Optional[datetime] = Field(
        None,
        description='The date that this Event Type was created, given in ISO 8601 format.',
    )
    date_updated: Optional[datetime] = Field(
        None,
        description='The date that this Event Type was updated, given in ISO 8601 format.',
    )
    description: Optional[str] = Field(
        None, description='A human readable description for this Event Type.'
    )
    links: Optional[Dict[str, Any]] = None
    schema_id: Optional[str] = Field(
        None,
        description='A string that uniquely identifies the Schema this Event Type adheres to.',
    )
    type: Optional[str] = Field(
        None, description='A string that uniquely identifies this Event Type.'
    )
    url: Optional[AnyUrl] = Field(None, description='The URL of this resource.')


class EventsV1Schema(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The unique identifier of the schema. Each schema can have multiple versions, that share the same id.',
    )
    latest_version: Optional[int] = Field(
        None, description='The latest version published of this schema.'
    )
    latest_version_date_created: Optional[datetime] = Field(
        None,
        description='The date that the latest schema version was created, given in ISO 8601 format.',
    )
    links: Optional[Dict[str, Any]] = Field(
        None,
        description='Contains a dictionary of URL links to nested resources of this schema.',
    )
    url: Optional[AnyUrl] = Field(None, description='The URL of this resource.')


class EventsV1SchemaSchemaVersion(BaseModel):
    date_created: Optional[datetime] = Field(
        None,
        description='The date the schema version was created, given in ISO 8601 format.',
    )
    id: Optional[str] = Field(
        None,
        description='The unique identifier of the schema. Each schema can have multiple versions, that share the same id.',
    )
    raw: Optional[AnyUrl] = None
    schema_version: Optional[int] = Field(
        None, description='The version of this schema.'
    )
    url: Optional[AnyUrl] = Field(None, description='The URL of this resource.')


class EventsV1SinkSinkTest(BaseModel):
    result: Optional[str] = Field(
        None, description='Feedback indicating whether the test event was generated.'
    )


class EventsV1SinkSinkValidate(BaseModel):
    result: Optional[str] = Field(
        None, description='Feedback indicating whether the given Sink was validated.'
    )


class EventsV1Subscription(BaseModel):
    account_sid: Optional[
        constr(pattern=r'^AC[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(None, description='The unique SID identifier of the Account.')
    date_created: Optional[datetime] = Field(
        None,
        description='The date that this Subscription was created, given in ISO 8601 format.',
    )
    date_updated: Optional[datetime] = Field(
        None,
        description='The date that this Subscription was updated, given in ISO 8601 format.',
    )
    description: Optional[str] = Field(
        None, description='A human readable description for the Subscription'
    )
    links: Optional[Dict[str, Any]] = Field(
        None,
        description='Contains a dictionary of URL links to nested resources of this Subscription.',
    )
    sid: Optional[
        constr(pattern=r'^DF[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(
        None,
        description='A 34 character string that uniquely identifies this Subscription.',
    )
    sink_sid: Optional[
        constr(pattern=r'^DG[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(
        None,
        description='The SID of the sink that events selected by this subscription should be sent to. Sink must be active for the subscription to be created.',
    )
    url: Optional[AnyUrl] = Field(None, description='The URL of this resource.')


class EventsV1SubscriptionSubscribedEvent(BaseModel):
    account_sid: Optional[
        constr(pattern=r'^AC[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(None, description='The unique SID identifier of the Account.')
    schema_version: Optional[int] = Field(
        None, description='The schema version that the subscription should use.'
    )
    subscription_sid: Optional[
        constr(pattern=r'^DF[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(None, description='The unique SID identifier of the Subscription.')
    type: Optional[str] = Field(None, description='Type of event being subscribed to.')
    url: Optional[AnyUrl] = Field(None, description='The URL of this resource.')


class SinkEnumSinkType(Enum):
    kinesis = 'kinesis'
    webhook = 'webhook'
    segment = 'segment'


class SinkEnumStatus(Enum):
    initialized = 'initialized'
    validating = 'validating'
    active = 'active'
    failed = 'failed'


class Meta(BaseModel):
    first_page_url: Optional[AnyUrl] = None
    key: Optional[str] = None
    next_page_url: Optional[AnyUrl] = None
    page: Optional[int] = None
    page_size: Optional[int] = None
    previous_page_url: Optional[AnyUrl] = None
    url: Optional[AnyUrl] = None


class V1SchemasIdVersionsGetResponse(BaseModel):
    meta: Optional[Meta] = None
    schema_versions: Optional[List[EventsV1SchemaSchemaVersion]] = None


class V1SinksPostRequest(BaseModel):
    Description: str = Field(
        ...,
        description='A human readable description for the Sink **This value should not contain PII.**',
    )
    SinkConfiguration: Any = Field(
        ...,
        description='The information required for Twilio to connect to the provided Sink encoded as JSON.',
    )
    SinkType: SinkEnumSinkType = Field(
        ..., description='The Sink type. Can only be "kinesis" or "webhook" currently.'
    )


class V1SinksSidPostRequest(BaseModel):
    Description: str = Field(
        ...,
        description='A human readable description for the Sink **This value should not contain PII.**',
    )


class V1SinksSidValidatePostRequest(BaseModel):
    TestId: str = Field(
        ...,
        description='A 34 character string that uniquely identifies the test event for a Sink being validated.',
    )


class V1SubscriptionsGetResponse(BaseModel):
    meta: Optional[Meta] = None
    subscriptions: Optional[List[EventsV1Subscription]] = None


class V1SubscriptionsPostRequest(BaseModel):
    Description: str = Field(
        ...,
        description='A human readable description for the Subscription **This value should not contain PII.**',
    )
    SinkSid: constr(pattern=r'^DG[0-9a-fA-F]{32}$', min_length=34, max_length=34) = (
        Field(
            ...,
            description='The SID of the sink that events selected by this subscription should be sent to. Sink must be active for the subscription to be created.',
        )
    )
    Types: List = Field(
        ..., description='An array of objects containing the subscribed Event Types'
    )


class V1SubscriptionsSidPostRequest(BaseModel):
    Description: Optional[str] = Field(
        None, description='A human readable description for the Subscription.'
    )
    SinkSid: Optional[
        constr(pattern=r'^DG[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(
        None,
        description='The SID of the sink that events selected by this subscription should be sent to. Sink must be active for the subscription to be created.',
    )


class V1SubscriptionsSubscriptionSidSubscribedEventsGetResponse(BaseModel):
    meta: Optional[Meta] = None
    types: Optional[List[EventsV1SubscriptionSubscribedEvent]] = None


class V1SubscriptionsSubscriptionSidSubscribedEventsPostRequest(BaseModel):
    SchemaVersion: Optional[int] = Field(
        None, description='The schema version that the subscription should use.'
    )
    Type: str = Field(..., description='Type of event being subscribed to.')


class V1SubscriptionsSubscriptionSidSubscribedEventsTypePostRequest(BaseModel):
    SchemaVersion: Optional[int] = Field(
        None, description='The schema version that the subscription should use.'
    )


class V1TypesGetResponse(BaseModel):
    meta: Optional[Meta] = None
    types: Optional[List[EventsV1EventType]] = None


class EventsV1Sink(BaseModel):
    date_created: Optional[datetime] = Field(
        None,
        description='The date that this Sink was created, given in ISO 8601 format.',
    )
    date_updated: Optional[datetime] = Field(
        None,
        description='The date that this Sink was updated, given in ISO 8601 format.',
    )
    description: Optional[str] = Field(
        None, description='A human readable description for the Sink'
    )
    links: Optional[Dict[str, Any]] = Field(
        None,
        description='Contains a dictionary of URL links to nested resources of this Sink.',
    )
    sid: Optional[
        constr(pattern=r'^DG[0-9a-fA-F]{32}$', min_length=34, max_length=34)
    ] = Field(
        None, description='A 34 character string that uniquely identifies this Sink.'
    )
    sink_configuration: Optional[Any] = Field(
        None,
        description='The information required for Twilio to connect to the provided Sink encoded as JSON.',
    )
    sink_type: Optional[SinkEnumSinkType] = Field(
        None, description='The Sink type. Can only be "kinesis" or "webhook" currently.'
    )
    status: Optional[SinkEnumStatus] = Field(
        None,
        description='The Status of this Sink. One of `initialized`, `validating`, `active` or `failed`.',
    )
    url: Optional[AnyUrl] = Field(None, description='The URL of this resource.')


class V1SinksGetResponse(BaseModel):
    meta: Optional[Meta] = None
    sinks: Optional[List[EventsV1Sink]] = None
